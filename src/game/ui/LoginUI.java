/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package game.ui;

import com.sun.glass.events.KeyEvent;
import game.audioplayer.AudioPlayer;
import game.crypt.Encrypt;
import game.globals.GlobalPath;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author user
 */
public class LoginUI extends javax.swing.JFrame {
    
    // Instance variables
    private String backgroundFile;
    private String upperPipeFile;
    private String lowerPipeFile;
    
    private Connection con;
    
    /**
     * Creates new form LoginUI
     * @param backgroundFile The background file
     * @param upperPipeFile The upper pipe file
     * @param lowerPipeFile The lower pipe file
     * @throws java.io.IOException Throws Input/output exception
     */
    public LoginUI(String backgroundFile, String upperPipeFile, 
            String lowerPipeFile) throws IOException {
        this.backgroundFile = backgroundFile;
        this.upperPipeFile = upperPipeFile;
        this.lowerPipeFile = lowerPipeFile;
        
        initComponents();
        init();
    }
    /**
     * Creates new form LoginUI
     */
    public LoginUI() {}
    
    private void init() throws IOException {
        setTitle(GlobalPath.APP_LOGIN_NAME);
        setSize(GlobalPath.CANVAS_WIDTH, GlobalPath.CANVAS_HEIGHT);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setResizable(false);
        
        // For the ground and the background
        InputStream streamBG, streamG;
        streamBG = getClass().getResourceAsStream(backgroundFile);
        streamG = getClass().getResourceAsStream(GlobalPath.GROUND);
        ImageIcon bgIcon = new ImageIcon(ImageIO.read(streamBG));
        ImageIcon groundIcon = new ImageIcon(ImageIO.read(streamG));
        backgroundLabel.setIcon(bgIcon);
        groundLabel.setIcon(groundIcon);
        
        usernameField.setForeground(Color.GRAY);
        usernameField.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent fe) {
                if (usernameField.getText().equals("Username")) {
                    usernameField.setText("");
                    usernameField.setForeground(Color.BLACK);
                }
            }

            @Override
            public void focusLost(FocusEvent fe) {
               if (usernameField.getText().isEmpty()) {
                    usernameField.setText("Username");
                    usernameField.setForeground(Color.GRAY);
                } 
            }
        });
        setVisible(true);
    } 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        playGuestButton = new javax.swing.JButton();
        signUpButton = new javax.swing.JButton();
        usernameHeader = new javax.swing.JLabel();
        passwordHeader = new javax.swing.JLabel();
        loginButton = new javax.swing.JButton();
        passwordField = new javax.swing.JPasswordField();
        usernameField = new javax.swing.JTextField();
        gameLoginTitle = new javax.swing.JLabel();
        groundLabel = new javax.swing.JLabel();
        backgroundLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        playGuestButton.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 11)); // NOI18N
        playGuestButton.setText("Play As Guest");
        playGuestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playGuestButtonActionPerformed(evt);
            }
        });
        getContentPane().add(playGuestButton);
        playGuestButton.setBounds(140, 10, 130, 23);

        signUpButton.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 11)); // NOI18N
        signUpButton.setText("Sign Up");
        signUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signUpButtonActionPerformed(evt);
            }
        });
        getContentPane().add(signUpButton);
        signUpButton.setBounds(10, 10, 90, 21);

        usernameHeader.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 11)); // NOI18N
        usernameHeader.setText("Enter Password:");
        getContentPane().add(usernameHeader);
        usernameHeader.setBounds(30, 220, 190, 13);

        passwordHeader.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 11)); // NOI18N
        passwordHeader.setText("Enter Username:");
        getContentPane().add(passwordHeader);
        passwordHeader.setBounds(30, 150, 170, 13);

        loginButton.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 11)); // NOI18N
        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });
        getContentPane().add(loginButton);
        loginButton.setBounds(80, 300, 110, 40);

        passwordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                passwordFieldKeyReleased(evt);
            }
        });
        getContentPane().add(passwordField);
        passwordField.setBounds(30, 250, 220, 20);

        usernameField.setText("Username");
        getContentPane().add(usernameField);
        usernameField.setBounds(30, 180, 220, 20);

        gameLoginTitle.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 24)); // NOI18N
        gameLoginTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gameLoginTitle.setText("GAME LOGIN");
        getContentPane().add(gameLoginTitle);
        gameLoginTitle.setBounds(20, 40, 230, 110);
        getContentPane().add(groundLabel);
        groundLabel.setBounds(0, 400, 290, 110);
        getContentPane().add(backgroundLabel);
        backgroundLabel.setBounds(0, 0, 290, 510);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * What happens when you press enter while typing in the password
     * @param evt The key event
     */
    private void passwordFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordFieldKeyReleased
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            checkCredentials();
        }
    }//GEN-LAST:event_passwordFieldKeyReleased
    
    /**
     * The login button when pressed
     * @param evt The action event
     */
    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        // TODO add your handling code here:
        checkCredentials();
    }//GEN-LAST:event_loginButtonActionPerformed
    
    /**
     * When the sign up button is clicked, take them to a web page.
     * @param evt The action Event
     */
    private void signUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signUpButtonActionPerformed
        // TODO add your handling code here:
        try {
            // Opens the link in browser and shows a message box afterwards
            Desktop.getDesktop().browse(new URI("https://fbird-analytical-"
                    + "dashboard.herokuapp.com/"));
            JOptionPane.showMessageDialog(null, "Attempting to open browser.");
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_signUpButtonActionPerformed
    
    /**
     * Plays as a guest
     * @param evt The action event
     */
    private void playGuestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playGuestButtonActionPerformed
        try {
            // TODO add your handling code here:
            startGame("");
        } catch (IOException ex) {
            Logger.getLogger(LoginUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_playGuestButtonActionPerformed
    
    /**
     * Checks the credentials of what has been entered into the database.
     */
    private void checkCredentials() {
        String username;
        String usernameInput = usernameField.getText();
        String passwordInput = String.valueOf(passwordField.getPassword());
        
        if (usernameInput.equals("") || usernameInput.equals("Username")) {
            JOptionPane.showMessageDialog(null, "Please enter a username.");
        }
        else if (passwordInput.equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter a password.");
        }
        else {
            try {
                Class.forName(GlobalPath.DB_DRIVER);
                System.out.println("Class works properly");
            
                con = DriverManager.getConnection(GlobalPath.DB_URL, 
                    GlobalPath.DB_USERNAME, GlobalPath.DB_PASSWORD);
                System.out.println("Connected!");
            
                Statement stmt = con.createStatement();
                String q = "SELECT * FROM admin_credentials WHERE "
                        + "username='"+usernameInput+"'";
                ResultSet rs = stmt.executeQuery(q);
            
                if (!rs.next()) {
                    JOptionPane.showMessageDialog(null, "Username or Password "
                        + "entered is incorrect. Please try again.");
                }
                else {
                    String actualPassword = rs.getString("password");
                    String newPassword = "";
                    Encrypt crypt = new Encrypt(passwordInput);
                
                    for (int i = 0; i < passwordInput.length(); i++) {
                        newPassword = crypt.getEncryptionWithSalt(i);
                        if (newPassword.equals(actualPassword)) {
                            username = rs.getString("username");
                            startGame(username);
                            return;
                        }
                        else if (!newPassword.equals(actualPassword) && 
                                i == passwordInput.length()-1) {
                            JOptionPane.showMessageDialog(null, "Password is "
                                    + "incorrect. Please try again.");
                        }
                    }
                }
            }
            catch (ClassNotFoundException | SQLException e) {
                JOptionPane.showMessageDialog(null, "Something went wrong "
                        + "our end. Please try again later.");
                System.out.println(e.getMessage());
            } 
            catch (NoSuchAlgorithmException | IOException ex) {
                Logger.getLogger(LoginUI.class.getName()).log(Level.SEVERE, 
                        null, ex);
            }
        }
    }
    
    /**
     * Starts the Game
     * @param username The username
     * @throws IOException Input output exception
     */
    private void startGame(String username) throws IOException {
        // Initialize game components and such..................................
        
        // Audio Player.........................................................
        AudioPlayer player = new AudioPlayer();
        
        // This is so we can randomize the bird color
        String midFlap = "";
        String downFlap = "";
        String upFlap = "";
        
        Random random = new Random();
        int value = random.nextInt(3)+1;
        
        switch (value) {
            case 1:
                // Blue Bird
                midFlap = GlobalPath.BB_MFLAP;
                downFlap = GlobalPath.BB_DFLAP;
                upFlap = GlobalPath.BB_UFLAP;
                break;
            case 2:
                // Red Bird
                midFlap = GlobalPath.RB_MFLAP;
                downFlap = GlobalPath.RB_DFLAP;
                upFlap = GlobalPath.RB_UFLAP;
                break;
            default:
                // Yellow Bird
                midFlap = GlobalPath.YB_MFLAP;
                downFlap = GlobalPath.YB_DFLAP;
                upFlap = GlobalPath.YB_UFLAP;
                break;
        }
        // Hide the login screen
        this.dispose();
        GameApplication application = new GameApplication(username, 
                backgroundFile, player, midFlap, downFlap, upFlap, 
                upperPipeFile, lowerPipeFile);
        application.setVisible(true);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JLabel gameLoginTitle;
    private javax.swing.JLabel groundLabel;
    private javax.swing.JButton loginButton;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordHeader;
    private javax.swing.JButton playGuestButton;
    private javax.swing.JButton signUpButton;
    private javax.swing.JTextField usernameField;
    private javax.swing.JLabel usernameHeader;
    // End of variables declaration//GEN-END:variables
}
